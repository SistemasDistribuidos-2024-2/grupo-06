syntax = "proto3";

option go_package = "grpc/serv_broker";

package serv_broker;

// Servicio del Broker para comunicación con Supervisores
service BrokerService {
    // Selección inicial de un servidor para el Supervisor
    rpc GetRandomServer (ServerRequest) returns (ServerResponse);

    // Resuelve inconsistencias notificadas por el Supervisor
    rpc ResolveInconsistency (InconsistencyRequest) returns (ServerResponse);
}

// Solicitud para obtener un servidor
message ServerRequest {
    string region = 1;                // Región del producto
    string product_name = 2;          // Nombre del producto
}

// Respuesta del Broker
message ServerResponse {
    string server_address = 1;        // Dirección del servidor asignado
    VectorClock server_clock = 2; // Reloj vectorial del Supervisor

}

// Solicitud de inconsistencia enviada por el Supervisor
message InconsistencyRequest {
    string region = 1;               // Región del producto
    string product_name = 2;         // Nombre del producto
    VectorClock supervisor_clock = 3; // Reloj vectorial del Supervisor
}

// Reloj vectorial para sincronización
message VectorClock {
    int32 server1 = 1;  // Reloj de servidor 1
    int32 server2 = 2;  // Reloj de servidor 2
    int32 server3 = 3;  // Reloj de servidor 3
}

// Servicio para interactuar con el servidor Hextech (que debería estar en el código de los servidores Hextech)
service HextechServerService {
    rpc GetVectorClock (ServerRequest) returns (ServerResponse);
}
