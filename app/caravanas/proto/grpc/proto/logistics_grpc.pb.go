// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: logistics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogisticsService_SendOrder_FullMethodName        = "/logistics.LogisticsService/SendOrder"
	LogisticsService_CheckOrderStatus_FullMethodName = "/logistics.LogisticsService/CheckOrderStatus"
)

// LogisticsServiceClient is the client API for LogisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio entre Facciones y el Sistema Logístico
type LogisticsServiceClient interface {
	// Facciones envían una orden al sistema logístico
	SendOrder(ctx context.Context, in *PackageOrder, opts ...grpc.CallOption) (*OrderResponse, error)
	// Facciones pueden consultar el estado de un paquete
	CheckOrderStatus(ctx context.Context, in *TrackingRequest, opts ...grpc.CallOption) (*TrackingResponse, error)
}

type logisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticsServiceClient(cc grpc.ClientConnInterface) LogisticsServiceClient {
	return &logisticsServiceClient{cc}
}

func (c *logisticsServiceClient) SendOrder(ctx context.Context, in *PackageOrder, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, LogisticsService_SendOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsServiceClient) CheckOrderStatus(ctx context.Context, in *TrackingRequest, opts ...grpc.CallOption) (*TrackingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackingResponse)
	err := c.cc.Invoke(ctx, LogisticsService_CheckOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogisticsServiceServer is the server API for LogisticsService service.
// All implementations must embed UnimplementedLogisticsServiceServer
// for forward compatibility.
//
// Servicio entre Facciones y el Sistema Logístico
type LogisticsServiceServer interface {
	// Facciones envían una orden al sistema logístico
	SendOrder(context.Context, *PackageOrder) (*OrderResponse, error)
	// Facciones pueden consultar el estado de un paquete
	CheckOrderStatus(context.Context, *TrackingRequest) (*TrackingResponse, error)
	mustEmbedUnimplementedLogisticsServiceServer()
}

// UnimplementedLogisticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogisticsServiceServer struct{}

func (UnimplementedLogisticsServiceServer) SendOrder(context.Context, *PackageOrder) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOrder not implemented")
}
func (UnimplementedLogisticsServiceServer) CheckOrderStatus(context.Context, *TrackingRequest) (*TrackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOrderStatus not implemented")
}
func (UnimplementedLogisticsServiceServer) mustEmbedUnimplementedLogisticsServiceServer() {}
func (UnimplementedLogisticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeLogisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogisticsServiceServer will
// result in compilation errors.
type UnsafeLogisticsServiceServer interface {
	mustEmbedUnimplementedLogisticsServiceServer()
}

func RegisterLogisticsServiceServer(s grpc.ServiceRegistrar, srv LogisticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogisticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogisticsService_ServiceDesc, srv)
}

func _LogisticsService_SendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).SendOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticsService_SendOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).SendOrder(ctx, req.(*PackageOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticsService_CheckOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServiceServer).CheckOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticsService_CheckOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServiceServer).CheckOrderStatus(ctx, req.(*TrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogisticsService_ServiceDesc is the grpc.ServiceDesc for LogisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.LogisticsService",
	HandlerType: (*LogisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOrder",
			Handler:    _LogisticsService_SendOrder_Handler,
		},
		{
			MethodName: "CheckOrderStatus",
			Handler:    _LogisticsService_CheckOrderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logistics.proto",
}

const (
	CaravanService_AssignDelivery_FullMethodName       = "/logistics.CaravanService/AssignDelivery"
	CaravanService_ReportDeliveryStatus_FullMethodName = "/logistics.CaravanService/ReportDeliveryStatus"
)

// CaravanServiceClient is the client API for CaravanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio entre el Sistema Logístico y las Caravanas
type CaravanServiceClient interface {
	// El sistema logístico envía instrucciones de entrega a las caravanas
	AssignDelivery(ctx context.Context, in *DeliveryInstruction, opts ...grpc.CallOption) (*DeliveryStatus, error)
	// Las caravanas reportan el estado de las entregas
	ReportDeliveryStatus(ctx context.Context, in *DeliveryStatus, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type caravanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaravanServiceClient(cc grpc.ClientConnInterface) CaravanServiceClient {
	return &caravanServiceClient{cc}
}

func (c *caravanServiceClient) AssignDelivery(ctx context.Context, in *DeliveryInstruction, opts ...grpc.CallOption) (*DeliveryStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeliveryStatus)
	err := c.cc.Invoke(ctx, CaravanService_AssignDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caravanServiceClient) ReportDeliveryStatus(ctx context.Context, in *DeliveryStatus, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CaravanService_ReportDeliveryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaravanServiceServer is the server API for CaravanService service.
// All implementations must embed UnimplementedCaravanServiceServer
// for forward compatibility.
//
// Servicio entre el Sistema Logístico y las Caravanas
type CaravanServiceServer interface {
	// El sistema logístico envía instrucciones de entrega a las caravanas
	AssignDelivery(context.Context, *DeliveryInstruction) (*DeliveryStatus, error)
	// Las caravanas reportan el estado de las entregas
	ReportDeliveryStatus(context.Context, *DeliveryStatus) (*emptypb.Empty, error)
	mustEmbedUnimplementedCaravanServiceServer()
}

// UnimplementedCaravanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCaravanServiceServer struct{}

func (UnimplementedCaravanServiceServer) AssignDelivery(context.Context, *DeliveryInstruction) (*DeliveryStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignDelivery not implemented")
}
func (UnimplementedCaravanServiceServer) ReportDeliveryStatus(context.Context, *DeliveryStatus) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDeliveryStatus not implemented")
}
func (UnimplementedCaravanServiceServer) mustEmbedUnimplementedCaravanServiceServer() {}
func (UnimplementedCaravanServiceServer) testEmbeddedByValue()                        {}

// UnsafeCaravanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaravanServiceServer will
// result in compilation errors.
type UnsafeCaravanServiceServer interface {
	mustEmbedUnimplementedCaravanServiceServer()
}

func RegisterCaravanServiceServer(s grpc.ServiceRegistrar, srv CaravanServiceServer) {
	// If the following call pancis, it indicates UnimplementedCaravanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CaravanService_ServiceDesc, srv)
}

func _CaravanService_AssignDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryInstruction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaravanServiceServer).AssignDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaravanService_AssignDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaravanServiceServer).AssignDelivery(ctx, req.(*DeliveryInstruction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaravanService_ReportDeliveryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaravanServiceServer).ReportDeliveryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaravanService_ReportDeliveryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaravanServiceServer).ReportDeliveryStatus(ctx, req.(*DeliveryStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// CaravanService_ServiceDesc is the grpc.ServiceDesc for CaravanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaravanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistics.CaravanService",
	HandlerType: (*CaravanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignDelivery",
			Handler:    _CaravanService_AssignDelivery_Handler,
		},
		{
			MethodName: "ReportDeliveryStatus",
			Handler:    _CaravanService_ReportDeliveryStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logistics.proto",
}
