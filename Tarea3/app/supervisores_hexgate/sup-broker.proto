syntax = "proto3";

option go_package = "grpc/sup-broker";

package supbroker;

// Servidores actúan como cliente y Broker actúa como servidor (para la comunicación proto)

service BrokerService {
    // Servicio que recibe la solicitud de un Supervisor y la redirige a un Servidor Hextech
    rpc ProcessRequest(SupervisorRequest) returns (ServerResponse);
}

message SupervisorRequest {
    // Nombre de la región (ej. Noxus)
    string region = 1;
    
    // Nombre del producto (ej. Vino)
    string product_name = 2;

    // Tipo de operación solicitada: AGREGAR, RENOMBRAR, ACTUALIZAR, BORRAR
    OperationType operation_type = 3;
    
    // Valor opcional para operaciones de agregar o actualizar
    int32 value = 4;

    // Nuevo nombre opcional en caso de renombrar
    string new_product_name = 5;
}

// Definición de los tipos de operación permitidos
enum OperationType {
    AGREGAR = 0;
    RENOMBRAR = 1;
    ACTUALIZAR = 2;
    BORRAR = 3;
}

message ServerResponse {
    // Estado de la respuesta: OK o ERROR
    ResponseStatus status = 1;
    
    // Reloj vectorial asociado a la última versión del registro solicitado
    VectorClock vector_clock = 2;
    
    // Mensaje opcional en caso de error
    string message = 3;
    
}

// Estado de la respuesta
enum ResponseStatus {
    OK = 0;
    ERROR = 1;
}

// Reloj vectorial que representa la versión de los datos en los servidores
message VectorClock {
    int32 server1 = 1; // Contador de cambios en Servidor Hextech 1
    int32 server2 = 2; // Contador de cambios en Servidor Hextech 2
    int32 server3 = 3; // Contador de cambios en Servidor Hextech 3
}
