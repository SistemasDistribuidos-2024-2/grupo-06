// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: primary-tai.proto

package tai_primary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaiNodeService_SolicitarCantidadDatos_FullMethodName = "/tainode.TaiNodeService/SolicitarCantidadDatos"
)

// TaiNodeServiceClient is the client API for TaiNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio para que el Nodo Tai solicite datos al Primary Node
type TaiNodeServiceClient interface {
	// RPC para solicitar la cantidad de datos acumulados de los Digimons sacrificados
	SolicitarCantidadDatos(ctx context.Context, in *SolicitudTai, opts ...grpc.CallOption) (*RespuestaTai, error)
}

type taiNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaiNodeServiceClient(cc grpc.ClientConnInterface) TaiNodeServiceClient {
	return &taiNodeServiceClient{cc}
}

func (c *taiNodeServiceClient) SolicitarCantidadDatos(ctx context.Context, in *SolicitudTai, opts ...grpc.CallOption) (*RespuestaTai, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaTai)
	err := c.cc.Invoke(ctx, TaiNodeService_SolicitarCantidadDatos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaiNodeServiceServer is the server API for TaiNodeService service.
// All implementations must embed UnimplementedTaiNodeServiceServer
// for forward compatibility.
//
// Servicio para que el Nodo Tai solicite datos al Primary Node
type TaiNodeServiceServer interface {
	// RPC para solicitar la cantidad de datos acumulados de los Digimons sacrificados
	SolicitarCantidadDatos(context.Context, *SolicitudTai) (*RespuestaTai, error)
	mustEmbedUnimplementedTaiNodeServiceServer()
}

// UnimplementedTaiNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaiNodeServiceServer struct{}

func (UnimplementedTaiNodeServiceServer) SolicitarCantidadDatos(context.Context, *SolicitudTai) (*RespuestaTai, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarCantidadDatos not implemented")
}
func (UnimplementedTaiNodeServiceServer) mustEmbedUnimplementedTaiNodeServiceServer() {}
func (UnimplementedTaiNodeServiceServer) testEmbeddedByValue()                        {}

// UnsafeTaiNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaiNodeServiceServer will
// result in compilation errors.
type UnsafeTaiNodeServiceServer interface {
	mustEmbedUnimplementedTaiNodeServiceServer()
}

func RegisterTaiNodeServiceServer(s grpc.ServiceRegistrar, srv TaiNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaiNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaiNodeService_ServiceDesc, srv)
}

func _TaiNodeService_SolicitarCantidadDatos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudTai)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaiNodeServiceServer).SolicitarCantidadDatos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaiNodeService_SolicitarCantidadDatos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaiNodeServiceServer).SolicitarCantidadDatos(ctx, req.(*SolicitudTai))
	}
	return interceptor(ctx, in, info, handler)
}

// TaiNodeService_ServiceDesc is the grpc.ServiceDesc for TaiNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaiNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tainode.TaiNodeService",
	HandlerType: (*TaiNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolicitarCantidadDatos",
			Handler:    _TaiNodeService_SolicitarCantidadDatos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "primary-tai.proto",
}
